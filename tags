!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AccessibleMemory	src/cpu.h	/^        class AccessibleMemory : public Memory {$/;"	c	class:Emulator::CPU
BytePair	src/utils.h	/^struct BytePair {$/;"	s	namespace:Emulator::Endianness::Utils
CPU	src/cpu.cpp	/^CPU::CPU(AccessibleMemory::Pieces pieces)$/;"	f	class:Emulator::CPU
CPU	src/cpu.h	/^class CPU : ReadableMemory {$/;"	c	namespace:Emulator
CantOpenFile	src/utils.cpp	/^CantOpenFile::CantOpenFile(std::string const& path)$/;"	f	class:Emulator::Utils::CantOpenFile
CantOpenFile	src/utils.h	/^class CantOpenFile : public std::runtime_error {$/;"	c	namespace:Emulator::Endianness::Utils
Cartridge	src/cartridge.h	/^class Cartridge : public Memory {$/;"	c	namespace:Emulator
Context	src/sdl++.h	/^struct Context {$/;"	s	class:Sdl::Scancode
DoubleWriteRegister	src/ppu.h	/^class DoubleWriteRegister {$/;"	c	namespace:Emulator
Emulator	src/cartridge.cpp	/^namespace Emulator {$/;"	n	file:
Emulator	src/cartridge.h	/^namespace Emulator {$/;"	n
Emulator	src/cpu.cpp	/^namespace Emulator {$/;"	n	file:
Emulator	src/cpu.h	/^namespace Emulator {$/;"	n
Emulator	src/joypads.cpp	/^namespace Emulator {$/;"	n	file:
Emulator	src/joypads.h	/^namespace Emulator {$/;"	n
Emulator	src/ppu.cpp	/^namespace Emulator {$/;"	n	file:
Emulator	src/ppu.h	/^namespace Emulator {$/;"	n
Emulator	src/rendering.cpp	/^namespace Emulator {$/;"	n	file:
Emulator	src/rendering.h	/^namespace Emulator {$/;"	n
Emulator	src/utils.cpp	/^namespace Emulator {$/;"	n	file:
Emulator	src/utils.h	/^namespace Emulator {$/;"	n
Endianness	src/utils.h	/^enum class Endianness {$/;"	c	namespace:Emulator
Error	src/sdl++.h	/^class Error : public std::exception {$/;"	c	namespace:Sdl
Flip	src/sdl++.h	/^enum class Flip {$/;"	c	class:Sdl::Scancode
Impl	src/cpu.cpp	/^        explicit Impl(AccessibleMemory::Pieces memory_pieces)$/;"	f	struct:Emulator::CPU::Impl
Impl	src/cpu.cpp	/^        explicit Impl(std::unique_ptr<AccessibleMemory> memory)$/;"	f	struct:Emulator::CPU::Impl
Impl	src/cpu.cpp	/^struct CPU::Impl {$/;"	s	class:Emulator::CPU	file:
InitGuard	src/sdl++.cpp	/^InitGuard::InitGuard()$/;"	f	class:Sdl::InitGuard
InitGuard	src/sdl++.h	/^class InitGuard {$/;"	c	class:Sdl::Scancode
Interrupt	src/cpu.h	/^        enum class Interrupt {$/;"	c	class:Emulator::CPU
InvalidAddress	src/utils.h	/^class InvalidAddress : public std::runtime_error {$/;"	c	class:Emulator::Endianness
InvalidCartridge	src/cartridge.h	/^class InvalidCartridge : public std::runtime_error {$/;"	c	namespace:Emulator
InvalidCartridgeHeader	src/cartridge.h	/^class InvalidCartridgeHeader : public std::runtime_error {$/;"	c	namespace:Emulator
Joypads	src/joypads.h	/^class Joypads : public Memory {$/;"	c	namespace:Emulator
MMC1	src/cartridge.h	/^class MMC1 : public Cartridge {$/;"	c	namespace:Emulator
MMC3	src/cartridge.h	/^class MMC3 : public Cartridge {$/;"	c	namespace:Emulator
Memory	src/utils.h	/^class Memory : public ReadableMemory {$/;"	c	class:Emulator::Endianness
MemoryMapperNotSupported	src/cartridge.h	/^class MemoryMapperNotSupported : public std::runtime_error {$/;"	c	namespace:Emulator
Mirroring	src/cartridge.h	/^enum class Mirroring {$/;"	c	namespace:Emulator
NESFile	src/cartridge.cpp	/^NESFile::NESFile(std::string const& path)$/;"	f	class:Emulator::NESFile
NESFile	src/cartridge.cpp	/^NESFile::NESFile(std::vector<Byte> new_data)$/;"	f	class:Emulator::NESFile
NESFile	src/cartridge.h	/^struct NESFile {$/;"	s	namespace:Emulator
NROM	src/cartridge.cpp	/^NROM::NROM(NESFile nes_file)$/;"	f	class:Emulator::NROM
NROM	src/cartridge.h	/^class NROM : public Cartridge {$/;"	c	namespace:Emulator
PPU	src/ppu.h	/^class PPU : public Memory {$/;"	c	namespace:Emulator
Priority	src/ppu.h	/^        enum class Priority {$/;"	c	struct:Emulator::Sprite
RAM	src/cpu.h	/^        class RAM : public Memory {$/;"	c	class:Emulator::CPU
ReadableMemory	src/utils.h	/^class ReadableMemory {$/;"	c	class:Emulator::Endianness
RendererColorGuard	src/sdl++.cpp	/^RendererColorGuard::RendererColorGuard(Renderer& renderer, Color color)$/;"	f	class:Sdl::RendererColorGuard
RendererColorGuard	src/sdl++.h	/^class RendererColorGuard {$/;"	c	class:Sdl::Scancode
RendererDeleter	src/sdl++.h	/^struct RendererDeleter {$/;"	s	class:Sdl::Scancode
Scancode	src/sdl++.h	/^enum class Scancode {$/;"	c	namespace:Sdl
Sdl	src/sdl++.cpp	/^namespace Sdl {$/;"	n	file:
Sdl	src/sdl++.h	/^namespace Sdl {$/;"	n
Sprite	src/ppu.h	/^struct Sprite {$/;"	s	namespace:Emulator
TwosComplement	src/utils.cpp	/^namespace TwosComplement {$/;"	n	namespace:Emulator	file:
TwosComplement	src/utils.h	/^namespace TwosComplement {$/;"	n	class:Emulator::Endianness
UnknownOpcode	src/cpu.h	/^class UnknownOpcode : public std::runtime_error {$/;"	c	namespace:Emulator
Utils	src/utils.cpp	/^namespace Utils {$/;"	n	namespace:Emulator	file:
Utils	src/utils.h	/^namespace Utils {$/;"	n	class:Emulator::Endianness
VRAM	src/ppu.h	/^class VRAM : public Memory {$/;"	c	namespace:Emulator
WindowDeleter	src/sdl++.h	/^struct WindowDeleter {$/;"	s	class:Sdl::Scancode
a	src/cpu.cpp	/^        Byte a = 0;$/;"	m	struct:Emulator::CPU::Impl	file:
a	src/sdl++.h	/^        a = SDL_SCANCODE_A,$/;"	m	class:Sdl::Scancode
absolute	src/cpu.cpp	/^        Instruction absolute(Operation operation)$/;"	f	struct:Emulator::CPU::Impl
absolute	src/cpu.cpp	/^        Instruction absolute(Operation operation, Offset offset)$/;"	f	struct:Emulator::CPU::Impl
absolute_x	src/cpu.cpp	/^        Instruction absolute_x(Operation operation)$/;"	f	struct:Emulator::CPU::Impl
absolute_y	src/cpu.cpp	/^        Instruction absolute_y(Operation const& operation)$/;"	f	struct:Emulator::CPU::Impl
accumulator	src/cpu.cpp	/^        Instruction accumulator(Operation operation)$/;"	f	struct:Emulator::CPU::Impl
address_size	src/cpu.h	/^        static unsigned constexpr address_size = 2;$/;"	m	class:Emulator::CPU
attribute_table_size	src/ppu.h	/^        static unsigned constexpr attribute_table_size = 0x0040;$/;"	m	class:Emulator::VRAM
attributes	src/ppu.h	/^        ByteBitset attributes = 0;$/;"	m	struct:Emulator::Sprite
background_palette_end	src/ppu.h	/^        static unsigned constexpr background_palette_end =$/;"	m	class:Emulator::VRAM
background_palette_start	src/ppu.h	/^        static unsigned constexpr background_palette_start = name_tables_end;$/;"	m	class:Emulator::VRAM
background_square_size	src/ppu.h	/^        static unsigned constexpr background_square_size = 16;$/;"	m	class:Emulator::PPU
background_tile_size	src/ppu.h	/^        static unsigned constexpr background_tile_size = 8;$/;"	m	class:Emulator::PPU
background_tiles_per_square	src/ppu.h	/^        static unsigned constexpr background_tiles_per_square =$/;"	m	class:Emulator::PPU
base_joypad_value	src/joypads.h	/^        static Byte constexpr base_joypad_value = 0x40;$/;"	m	class:Emulator::Joypads
beneath_background	src/ppu.h	/^                beneath_background,$/;"	m	class:Emulator::Sprite::Priority
big	src/utils.h	/^        big = SDL_BIG_ENDIAN,$/;"	m	class:Emulator::Endianness
break_flag	src/cpu.h	/^        static unsigned constexpr break_flag = 4;$/;"	m	class:Emulator::CPU
carry_flag	src/cpu.h	/^        static unsigned constexpr carry_flag = 0;$/;"	m	class:Emulator::CPU
check_data_size	src/cartridge.cpp	/^void NESFile::check_data_size() const$/;"	f	class:Emulator::NESFile
check_header_footprint	src/cartridge.cpp	/^void NESFile::check_header_footprint() const$/;"	f	class:Emulator::NESFile
complete_	src/ppu.h	/^        bool complete_ = true;$/;"	m	class:Emulator::DoubleWriteRegister
control_	src/ppu.h	/^        ByteBitset control_ = 0;$/;"	m	class:Emulator::PPU
control_register	src/ppu.h	/^        static unsigned constexpr control_register = 0x2000;$/;"	m	class:Emulator::PPU
create_context	src/sdl++.cpp	/^Context create_context(std::string const& title,$/;"	f	namespace:Sdl
create_renderer	src/sdl++.cpp	/^UniqueRenderer create_renderer(Window& window, Color color)$/;"	f	namespace:Sdl
create_window	src/sdl++.cpp	/^UniqueWindow create_window(std::string const& title, int width, int height)$/;"	f	namespace:Sdl
data	src/cartridge.h	/^        std::vector<Byte> data;$/;"	m	struct:Emulator::NESFile
deref_byte	src/utils.cpp	/^Byte ReadableMemory::deref_byte(unsigned address)$/;"	f	class:Emulator::ReadableMemory
deref_pointer	src/utils.cpp	/^unsigned ReadableMemory::deref_pointer(unsigned address)$/;"	f	class:Emulator::ReadableMemory
dma_memory_	src/ppu.cpp	/^        : dma_memory_(dma_memory)$/;"	f	namespace:Emulator
dma_memory_	src/ppu.h	/^        ReadableMemory& dma_memory_;$/;"	m	class:Emulator::PPU
down	src/sdl++.h	/^        down = SDL_SCANCODE_DOWN,$/;"	m	class:Sdl::Scancode
end	src/cpu.h	/^                static unsigned constexpr end = 0x2000u;$/;"	m	class:Emulator::CPU::RAM
execute_dma	src/ppu.cpp	/^void PPU::execute_dma(Byte source)$/;"	f	class:Emulator::PPU
execute_instruction	src/cpu.cpp	/^void CPU::execute_instruction()$/;"	f	class:Emulator::CPU
execute_on_memory	src/cpu.cpp	/^        void execute_on_memory(void (Impl::*operation)(Byte operand),$/;"	f	struct:Emulator::CPU::Impl
find_piece	src/cpu.h	/^                Memory& find_piece(P const& p, E const& e)$/;"	f	class:Emulator::CPU::AccessibleMemory
find_readable_piece	src/cpu.cpp	/^Memory& CPU::AccessibleMemory::find_readable_piece(unsigned address)$/;"	f	class:Emulator::CPU::AccessibleMemory
find_writable_piece	src/cpu.cpp	/^Memory& CPU::AccessibleMemory::find_writable_piece(unsigned address)$/;"	f	class:Emulator::CPU::AccessibleMemory
first_joypad_address	src/joypads.h	/^        static unsigned constexpr first_joypad_address = 0x4016;$/;"	m	class:Emulator::Joypads
format_address	src/utils.cpp	/^std::string format_address(unsigned address)$/;"	f	namespace:Emulator::Utils
format_hex	src/utils.cpp	/^std::string format_hex(unsigned value, int width)$/;"	f	namespace:Emulator::Utils
get_render_color	src/sdl++.cpp	/^Color get_render_color(Renderer& Renderer)$/;"	f	namespace:Sdl
hardware_interrupt	src/cpu.cpp	/^void CPU::hardware_interrupt(Interrupt interrupt)$/;"	f	class:Emulator::CPU
header_size	src/cartridge.h	/^        static unsigned constexpr header_size = 0x10;$/;"	m	struct:Emulator::NESFile
high	src/utils.h	/^        Byte high;$/;"	m	struct:Emulator::Endianness::Utils::BytePair
horizontal	src/cartridge.h	/^        horizontal,$/;"	m	class:Emulator::Mirroring
horizontal	src/sdl++.h	/^        horizontal = SDL_FLIP_HORIZONTAL$/;"	m	class:Sdl::Scancode::Flip
id	src/cartridge.h	/^        static Byte constexpr id = 0;$/;"	m	class:Emulator::NROM
id	src/cartridge.h	/^        static Byte constexpr id = 1;$/;"	m	class:Emulator::MMC1
id	src/cartridge.h	/^        static Byte constexpr id = 4;$/;"	m	class:Emulator::MMC3
immediate	src/cpu.cpp	/^        Instruction immediate(Operation operation)$/;"	f	struct:Emulator::CPU::Impl
impl_	src/cpu.h	/^        std::unique_ptr<Impl> impl_;$/;"	m	class:Emulator::CPU
implied	src/cpu.cpp	/^        Instruction implied(Operation operation)$/;"	f	struct:Emulator::CPU::Impl
implied_brk	src/cpu.cpp	/^        void implied_brk()$/;"	f	struct:Emulator::CPU::Impl
indirect	src/cpu.cpp	/^        Instruction indirect(Operation operation)$/;"	f	struct:Emulator::CPU::Impl
indirect_x	src/cpu.cpp	/^        Instruction indirect_x(Operation operation) \/\/ Indexed indirect$/;"	f	struct:Emulator::CPU::Impl
indirect_y	src/cpu.cpp	/^        Instruction indirect_y(Operation operation) \/\/ Indirect indexed$/;"	f	struct:Emulator::CPU::Impl
interrupt_disable_flag	src/cpu.h	/^        static unsigned constexpr interrupt_disable_flag = 2;$/;"	m	class:Emulator::CPU
irq	src/cpu.h	/^                irq,$/;"	m	class:Emulator::CPU::Interrupt
last_write_	src/joypads.h	/^        Byte last_write_ = 0;$/;"	m	class:Emulator::Joypads
left	src/sdl++.h	/^        left = SDL_SCANCODE_LEFT,$/;"	m	class:Sdl::Scancode
little	src/utils.h	/^        little = SDL_LIL_ENDIAN$/;"	m	class:Emulator::Endianness
low	src/utils.h	/^        Byte low;$/;"	m	struct:Emulator::Endianness::Utils::BytePair
main	src/main.cpp	/^int main(int argc, char** argv)$/;"	f
main_loop	src/main.cpp	/^void main_loop(Emulator::CPU& cpu, Emulator::PPU& ppu)$/;"	f	namespace:__anon1
make	src/cartridge.cpp	/^UniqueCartridge Cartridge::make(NESFile nes_file)$/;"	f	class:Emulator::Cartridge
make	src/cartridge.cpp	/^UniqueCartridge Cartridge::make(std::string const& path)$/;"	f	class:Emulator::Cartridge
mask_	src/ppu.h	/^        ByteBitset mask_ = 0;$/;"	m	class:Emulator::PPU
mask_register	src/ppu.h	/^        static unsigned constexpr mask_register = 0x2001;$/;"	m	class:Emulator::PPU
memory	src/cpu.cpp	/^        std::unique_ptr<AccessibleMemory> memory;$/;"	m	struct:Emulator::CPU::Impl	file:
mirrors_size	src/cpu.h	/^                static unsigned constexpr mirrors_size = end - real_size;$/;"	m	class:Emulator::CPU::RAM
move	src/cpu.cpp	/^        : pieces_(std::move(pieces))$/;"	f	namespace:Emulator
name_table_size	src/ppu.h	/^        static unsigned constexpr name_table_size = 0x03C0;$/;"	m	class:Emulator::VRAM
name_tables_end	src/ppu.h	/^        static unsigned constexpr name_tables_end = 0x3F00;$/;"	m	class:Emulator::VRAM
name_tables_real_size	src/ppu.h	/^        static unsigned constexpr name_tables_real_size =$/;"	m	class:Emulator::VRAM
name_tables_size	src/ppu.h	/^        static unsigned constexpr name_tables_size =$/;"	m	class:Emulator::VRAM
name_tables_start	src/ppu.h	/^        static unsigned constexpr name_tables_start = pattern_tables_end;$/;"	m	class:Emulator::VRAM
negative_flag	src/cpu.h	/^        static unsigned constexpr negative_flag = 7;  $/;"	m	class:Emulator::CPU
nes_file_	src/cartridge.h	/^        NESFile nes_file_;$/;"	m	class:Emulator::NROM
nmi	src/cpu.h	/^                nmi,$/;"	m	class:Emulator::CPU::Interrupt
noexcept	src/cartridge.h	/^        Byte mmc_id() const noexcept;$/;"	m	struct:Emulator::NESFile
noexcept	src/cartridge.h	/^        Byte num_chr_rom_banks() const noexcept;$/;"	m	struct:Emulator::NESFile
noexcept	src/cartridge.h	/^        Byte num_prg_rom_banks() const noexcept;$/;"	m	struct:Emulator::NESFile
noexcept	src/cartridge.h	/^        ByteBitset first_control_byte() const noexcept;$/;"	m	struct:Emulator::NESFile
noexcept	src/cartridge.h	/^        ByteBitset second_control_byte() const noexcept;$/;"	m	struct:Emulator::NESFile
noexcept	src/cartridge.h	/^        Mirroring mirroring() const noexcept;$/;"	m	struct:Emulator::NESFile
noexcept	src/cartridge.h	/^        bool has_chr_ram() const noexcept;$/;"	m	struct:Emulator::NESFile
noexcept	src/cartridge.h	/^        bool has_sram() const noexcept;$/;"	m	struct:Emulator::NESFile
noexcept	src/cartridge.h	/^        bool has_trainer() const noexcept;$/;"	m	struct:Emulator::NESFile
noexcept	src/cartridge.h	/^        explicit MemoryMapperNotSupported(Byte id) noexcept;$/;"	m	class:Emulator::MemoryMapperNotSupported
noexcept	src/cpu.h	/^                explicit AccessibleMemory(Pieces pieces) noexcept;$/;"	m	class:Emulator::CPU::AccessibleMemory
noexcept	src/cpu.h	/^                static bool address_is_accessible(unsigned addres) noexcept;$/;"	m	class:Emulator::CPU::RAM
noexcept	src/cpu.h	/^                unsigned translate_address(unsigned address) const noexcept;$/;"	m	class:Emulator::CPU::RAM
noexcept	src/cpu.h	/^        Byte a() const noexcept;$/;"	m	class:Emulator::CPU
noexcept	src/cpu.h	/^        Byte p() const noexcept;$/;"	m	class:Emulator::CPU
noexcept	src/cpu.h	/^        Byte sp() const noexcept;$/;"	m	class:Emulator::CPU
noexcept	src/cpu.h	/^        Byte x() const noexcept;$/;"	m	class:Emulator::CPU
noexcept	src/cpu.h	/^        Byte y() const noexcept;$/;"	m	class:Emulator::CPU
noexcept	src/cpu.h	/^        explicit UnknownOpcode(Byte opcode) noexcept;$/;"	m	class:Emulator::UnknownOpcode
noexcept	src/cpu.h	/^        static unsigned interrupt_handler_address(Interrupt interrupt) noexcept;$/;"	m	class:Emulator::CPU
noexcept	src/cpu.h	/^        unsigned pc() const noexcept;$/;"	m	class:Emulator::CPU
noexcept	src/joypads.h	/^        Byte read_first_joypad() noexcept;$/;"	m	class:Emulator::Joypads
noexcept	src/joypads.h	/^        bool strobe() const noexcept;$/;"	m	class:Emulator::Joypads
noexcept	src/ppu.h	/^                                       std::bitset<2> low_color_bits) const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^                                     unsigned square_y) const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^                                   std::bitset<2> low_color_bits) const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        Byte background_color(unsigned palette_index) const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        Byte read_high_byte() const noexcept;$/;"	m	class:Emulator::DoubleWriteRegister
noexcept	src/ppu.h	/^        Byte read_low_byte() const noexcept;$/;"	m	class:Emulator::DoubleWriteRegister
noexcept	src/ppu.h	/^        Byte sprite_color(unsigned palette_index) const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        Priority priority() const noexcept;$/;"	m	struct:Emulator::Sprite
noexcept	src/ppu.h	/^        bool complete() const noexcept;$/;"	m	class:Emulator::DoubleWriteRegister
noexcept	src/ppu.h	/^        bool flip_horizontally() const noexcept;$/;"	m	struct:Emulator::Sprite
noexcept	src/ppu.h	/^        bool flip_vertically() const noexcept;$/;"	m	struct:Emulator::Sprite
noexcept	src/ppu.h	/^        bool greyscale() const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        bool nmi_enabled() const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        bool show_background() const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        bool show_leftmost_background() const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        bool show_leftmost_sprites() const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        bool show_sprites() const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        explicit PPU(ReadableMemory& dma_memory) noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        static bool address_is_accessible(unsigned address) noexcept;$/;"	m	class:Emulator::VRAM
noexcept	src/ppu.h	/^        std::bitset<2> color_bits() const noexcept;$/;"	m	struct:Emulator::Sprite
noexcept	src/ppu.h	/^        unsigned address_increment_offset() const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        unsigned background_pattern_table_address() const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        unsigned base_name_table_address() const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        unsigned read_whole() const noexcept;$/;"	m	class:Emulator::DoubleWriteRegister
noexcept	src/ppu.h	/^        unsigned sprite_height() const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        unsigned sprite_pattern_table_address() const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        void increment(unsigned offset) noexcept;$/;"	m	class:Emulator::DoubleWriteRegister
noexcept	src/ppu.h	/^        void increment_oam_address() noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        void increment_vram_address() noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        void paint_background(Screen& screen) const noexcept;$/;"	m	class:Emulator::PPU
noexcept	src/ppu.h	/^        void write_half(Byte byte) noexcept;$/;"	m	class:Emulator::DoubleWriteRegister
noexcept	src/ppu.h	/^        void write_whole(unsigned value) noexcept;$/;"	m	class:Emulator::DoubleWriteRegister
noexcept	src/rendering.h	/^Sdl::Color nes_color_to_rgb(Byte nes_color) noexcept;$/;"	m	namespace:Emulator
noexcept	src/sdl++.h	/^        void operator()(Renderer* Renderer) const noexcept;$/;"	m	struct:Sdl::Scancode::RendererDeleter
noexcept	src/sdl++.h	/^        void operator()(Window* window) const noexcept;$/;"	m	struct:Sdl::Scancode::WindowDeleter
noexcept	src/sdl++.h	/^bool key_is_down(Scancode scancode) noexcept;$/;"	m	class:Sdl::Scancode
noexcept	src/utils.h	/^        virtual bool address_is_readable(unsigned address) const noexcept = 0;$/;"	m	class:Emulator::Endianness::ReadableMemory
noexcept	src/utils.h	/^        virtual bool address_is_writable(unsigned address) const noexcept = 0;$/;"	m	class:Emulator::Endianness::Memory
noexcept	src/utils.h	/^Byte decode(int value) noexcept;$/;"	m	namespace:Emulator::Endianness::TwosComplement
noexcept	src/utils.h	/^Byte high_byte(unsigned two_bytes) noexcept;$/;"	m	namespace:Emulator::Endianness::Utils
noexcept	src/utils.h	/^Byte low_byte(unsigned two_bytes) noexcept;$/;"	m	namespace:Emulator::Endianness::Utils
noexcept	src/utils.h	/^BytePair split_bytes(unsigned two_bytes) noexcept;$/;"	m	namespace:Emulator::Endianness::Utils
noexcept	src/utils.h	/^int encode(Byte value) noexcept;$/;"	m	namespace:Emulator::Endianness::TwosComplement
noexcept	src/utils.h	/^unsigned combine_bytes(Byte low, Byte high) noexcept;$/;"	m	namespace:Emulator::Endianness::Utils
noexcept	src/utils.h	/^unsigned combine_bytes(BytePair byte_pair) noexcept;$/;"	m	namespace:Emulator::Endianness::Utils
none	src/sdl++.h	/^        none = SDL_FLIP_NONE,$/;"	m	class:Sdl::Scancode::Flip
num_reads_	src/joypads.h	/^        int num_reads_ = 0;$/;"	m	class:Emulator::Joypads
oam_address_	src/ppu.h	/^        Byte oam_address_ = 0;$/;"	m	class:Emulator::PPU
oam_address_register	src/ppu.h	/^        static unsigned constexpr oam_address_register = 0x2003;$/;"	m	class:Emulator::PPU
oam_data_register	src/ppu.h	/^        static unsigned constexpr oam_data_register = 0x2004;$/;"	m	class:Emulator::PPU
oam_dma_register	src/ppu.h	/^        static unsigned constexpr oam_dma_register = 0x4014;$/;"	m	class:Emulator::PPU
oam_size	src/ppu.h	/^static unsigned constexpr oam_size = 0x0100;$/;"	m	namespace:Emulator
other	src/cpu.h	/^        CPU& operator=(CPU const& other) = delete;$/;"	m	class:Emulator::CPU
other	src/cpu.h	/^        CPU& operator=(CPU&& other) = default;$/;"	m	class:Emulator::CPU
other	src/cpu.h	/^        CPU(CPU const& other) = delete;$/;"	m	class:Emulator::CPU
other	src/cpu.h	/^        CPU(CPU&& other) = default;$/;"	m	class:Emulator::CPU
overflow_flag	src/cpu.h	/^        static unsigned constexpr overflow_flag = 6;$/;"	m	class:Emulator::CPU
override	src/cartridge.h	/^        Byte read_byte(unsigned address) override;$/;"	m	class:Emulator::NROM
override	src/cartridge.h	/^        bool address_is_readable(unsigned address) const noexcept override;$/;"	m	class:Emulator::NROM
override	src/cartridge.h	/^        bool address_is_writable(unsigned address) const noexcept override;$/;"	m	class:Emulator::NROM
override	src/cartridge.h	/^        void write_byte(unsigned address, Byte byte) override;$/;"	m	class:Emulator::NROM
override	src/cpu.h	/^                Byte read_byte(unsigned address) override;$/;"	m	class:Emulator::CPU::AccessibleMemory
override	src/cpu.h	/^                Byte read_byte(unsigned address) override;$/;"	m	class:Emulator::CPU::RAM
override	src/cpu.h	/^                bool address_is_readable(unsigned address) const noexcept override;$/;"	m	class:Emulator::CPU::AccessibleMemory
override	src/cpu.h	/^                bool address_is_readable(unsigned address) const noexcept override;$/;"	m	class:Emulator::CPU::RAM
override	src/cpu.h	/^                bool address_is_writable(unsigned address) const noexcept override;$/;"	m	class:Emulator::CPU::AccessibleMemory
override	src/cpu.h	/^                bool address_is_writable(unsigned address) const noexcept override;$/;"	m	class:Emulator::CPU::RAM
override	src/cpu.h	/^                void write_byte(unsigned address, Byte byte) override;$/;"	m	class:Emulator::CPU::AccessibleMemory
override	src/cpu.h	/^                void write_byte(unsigned address, Byte byte) override;$/;"	m	class:Emulator::CPU::RAM
override	src/cpu.h	/^        Byte read_byte(unsigned address) override;$/;"	m	class:Emulator::CPU
override	src/cpu.h	/^        bool address_is_readable(unsigned address) const noexcept override;$/;"	m	class:Emulator::CPU
override	src/joypads.h	/^        Byte read_byte(unsigned address) override;$/;"	m	class:Emulator::Joypads
override	src/joypads.h	/^        bool address_is_readable(unsigned address) const noexcept override;$/;"	m	class:Emulator::Joypads
override	src/joypads.h	/^        bool address_is_writable(unsigned address) const noexcept override;$/;"	m	class:Emulator::Joypads
override	src/joypads.h	/^        void write_byte(unsigned address, Byte byte) override;$/;"	m	class:Emulator::Joypads
override	src/ppu.h	/^        Byte read_byte(unsigned address) override;$/;"	m	class:Emulator::VRAM
override	src/ppu.h	/^        bool address_is_readable(unsigned address) const noexcept override;$/;"	m	class:Emulator::PPU
override	src/ppu.h	/^        bool address_is_readable(unsigned address) const noexcept override;$/;"	m	class:Emulator::VRAM
override	src/ppu.h	/^        bool address_is_writable(unsigned address) const noexcept override;$/;"	m	class:Emulator::PPU
override	src/ppu.h	/^        bool address_is_writable(unsigned address) const noexcept override;$/;"	m	class:Emulator::VRAM
override	src/ppu.h	/^        void write_byte(unsigned address, Byte byte) override;$/;"	m	class:Emulator::VRAM
override	src/sdl++.h	/^        char const* what() const noexcept override;$/;"	m	class:Sdl::Error
p	src/cpu.cpp	/^        ByteBitset p = 0x20;$/;"	m	struct:Emulator::CPU::Impl	file:
palette_size	src/ppu.h	/^        static unsigned constexpr palette_size = 0x0010;$/;"	m	class:Emulator::VRAM
palettes_end	src/ppu.h	/^        static unsigned constexpr palettes_end = 0x4000;$/;"	m	class:Emulator::VRAM
palettes_real_size	src/ppu.h	/^        static unsigned constexpr palettes_real_size =$/;"	m	class:Emulator::VRAM
palettes_size	src/ppu.h	/^        static unsigned constexpr palettes_size = palettes_end - palettes_start;$/;"	m	class:Emulator::VRAM
palettes_start	src/ppu.h	/^        static unsigned constexpr palettes_start = background_palette_start;$/;"	m	class:Emulator::VRAM
pattern_table_size	src/ppu.h	/^        static unsigned constexpr pattern_table_size = 0x1000;$/;"	m	class:Emulator::VRAM
pattern_tables_end	src/ppu.h	/^        static unsigned constexpr pattern_tables_end = 0x2000;$/;"	m	class:Emulator::VRAM
pattern_tables_size	src/ppu.h	/^        static unsigned constexpr pattern_tables_size =$/;"	m	class:Emulator::VRAM
pattern_tables_start	src/ppu.h	/^        static unsigned constexpr pattern_tables_start = 0x0000;$/;"	m	class:Emulator::VRAM
pc	src/cpu.cpp	/^        unsigned pc = 0;$/;"	m	struct:Emulator::CPU::Impl	file:
pieces_	src/cpu.h	/^                Pieces pieces_;$/;"	m	class:Emulator::CPU::AccessibleMemory
poll_event	src/sdl++.cpp	/^OptionalEvent poll_event()$/;"	f	namespace:Sdl
previous_color_	src/sdl++.h	/^        Color previous_color_;$/;"	m	class:Sdl::Scancode::RendererColorGuard
prg_ram_bank_size	src/cartridge.h	/^        static unsigned constexpr prg_ram_bank_size = 0x2000;$/;"	m	class:Emulator::Cartridge
prg_ram_end	src/cartridge.h	/^        static unsigned constexpr prg_ram_end = prg_ram_start + prg_ram_bank_size;$/;"	m	class:Emulator::Cartridge
prg_ram_start	src/cartridge.h	/^        static unsigned constexpr prg_ram_start = 0x6000;$/;"	m	class:Emulator::Cartridge
prg_rom_bank_size	src/cartridge.h	/^        static unsigned constexpr prg_rom_bank_size = 0x4000;$/;"	m	class:Emulator::Cartridge
prg_rom_lower_bank_end	src/cartridge.h	/^        static unsigned constexpr prg_rom_lower_bank_end = $/;"	m	class:Emulator::Cartridge
prg_rom_lower_bank_start	src/cartridge.h	/^        static unsigned constexpr prg_rom_lower_bank_start = 0x8000;$/;"	m	class:Emulator::Cartridge
prg_rom_start	src/cartridge.h	/^        static unsigned constexpr prg_rom_start = header_size;$/;"	m	struct:Emulator::NESFile
prg_rom_upper_bank_end	src/cartridge.h	/^        static unsigned constexpr prg_rom_upper_bank_end =$/;"	m	class:Emulator::Cartridge
prg_rom_upper_bank_start	src/cartridge.h	/^        static unsigned constexpr prg_rom_upper_bank_start = prg_rom_lower_bank_end;$/;"	m	class:Emulator::Cartridge
read_byte	src/cartridge.cpp	/^Byte NROM::read_byte(unsigned address) const$/;"	f	class:Emulator::NROM
read_byte	src/cartridge.cpp	/^Byte NROM::read_byte(unsigned address)$/;"	f	class:Emulator::NROM
read_byte	src/cpu.cpp	/^Byte CPU::AccessibleMemory::read_byte(unsigned address)$/;"	f	class:Emulator::CPU::AccessibleMemory
read_byte	src/cpu.cpp	/^Byte CPU::RAM::read_byte(unsigned address)$/;"	f	class:Emulator::CPU::RAM
read_byte	src/cpu.cpp	/^Byte CPU::read_byte(unsigned address)$/;"	f	class:Emulator::CPU
read_byte	src/joypads.cpp	/^Byte Joypads::read_byte(unsigned address)$/;"	f	class:Emulator::Joypads
read_byte	src/ppu.cpp	/^Byte PPU::read_byte(unsigned address)$/;"	f	class:Emulator::PPU
read_byte	src/ppu.cpp	/^Byte VRAM::read_byte(unsigned address) const$/;"	f	class:Emulator::VRAM
read_byte	src/ppu.cpp	/^Byte VRAM::read_byte(unsigned address)$/;"	f	class:Emulator::VRAM
read_bytes	src/utils.cpp	/^std::vector<Byte> read_bytes(std::ifstream& ifstream)$/;"	f	namespace:Emulator::Utils
read_bytes	src/utils.cpp	/^std::vector<Byte> read_bytes(std::string const& path)$/;"	f	namespace:Emulator::Utils
read_pointer	src/utils.cpp	/^unsigned ReadableMemory::read_pointer(unsigned address)$/;"	f	class:Emulator::ReadableMemory
real_size	src/cpu.h	/^                static unsigned constexpr real_size = 0x0800u;$/;"	m	class:Emulator::CPU::RAM
relative	src/cpu.cpp	/^        Instruction relative(Branch branch)$/;"	f	struct:Emulator::CPU::Impl
render_clear	src/sdl++.cpp	/^void render_clear(Renderer& renderer)$/;"	f	namespace:Sdl
render_filled_rect	src/sdl++.cpp	/^void render_filled_rect(Renderer& renderer, Rect rect)$/;"	f	namespace:Sdl
render_filled_rect	src/sdl++.cpp	/^void render_filled_rect(Renderer& renderer, Rect rect, Color color)$/;"	f	namespace:Sdl
render_pixel	src/rendering.cpp	/^void render_pixel(Sdl::Renderer& renderer, Sdl::Color color, int x, int y)$/;"	f	namespace:Emulator
render_present	src/sdl++.cpp	/^void render_present(Renderer& renderer)$/;"	f	namespace:Sdl
render_screen	src/rendering.cpp	/^void render_screen(Sdl::Renderer& renderer, Screen const& screen)$/;"	f	namespace:Emulator
renderer	src/sdl++.h	/^        UniqueRenderer renderer;$/;"	m	struct:Sdl::Scancode::Context
renderer_	src/sdl++.h	/^        Renderer& renderer_;$/;"	m	class:Sdl::Scancode::RendererColorGuard
returns_void	src/utils.h	/^bool constexpr returns_void =$/;"	m	namespace:Emulator::Endianness::Utils
right	src/sdl++.h	/^        right = SDL_SCANCODE_RIGHT,$/;"	m	class:Sdl::Scancode
s	src/sdl++.h	/^        s = SDL_SCANCODE_S,$/;"	m	class:Sdl::Scancode
screen	src/ppu.cpp	/^Screen PPU::screen() const$/;"	f	class:Emulator::PPU
screen_height	src/ppu.h	/^unsigned constexpr screen_height = 240;$/;"	m	namespace:Emulator
screen_width	src/ppu.h	/^unsigned constexpr screen_width = 256;$/;"	m	namespace:Emulator
scroll_	src/ppu.h	/^        DoubleWriteRegister scroll_;$/;"	m	class:Emulator::PPU
scroll_register	src/ppu.h	/^        static unsigned constexpr scroll_register = 0x2005;$/;"	m	class:Emulator::PPU
second_joypad_address	src/joypads.h	/^        static unsigned constexpr second_joypad_address = first_joypad_address + 1;$/;"	m	class:Emulator::Joypads
set_blend_mode	src/sdl++.cpp	/^void set_blend_mode(Renderer& renderer)$/;"	f	namespace:Sdl::__anon2
set_render_color	src/sdl++.cpp	/^void set_render_color(Renderer& renderer, Color color)$/;"	f	namespace:Sdl
sign_bit	src/utils.h	/^std::size_t constexpr sign_bit = CHAR_BIT - 1;$/;"	m	class:Emulator::Endianness
signed_byte_max	src/utils.h	/^SignedByte constexpr signed_byte_max = std::numeric_limits<SignedByte>::max();$/;"	m	class:Emulator::Endianness
signed_byte_min	src/utils.h	/^SignedByte constexpr signed_byte_min = std::numeric_limits<SignedByte>::min();$/;"	m	class:Emulator::Endianness
size	src/ppu.h	/^        static unsigned constexpr size = 0x10000;$/;"	m	class:Emulator::VRAM
sp	src/cpu.cpp	/^        Byte sp = byte_max;$/;"	m	struct:Emulator::CPU::Impl	file:
sprite_palette_end	src/ppu.h	/^        static unsigned constexpr sprite_palette_end =$/;"	m	class:Emulator::VRAM
sprite_palette_start	src/ppu.h	/^        static unsigned constexpr sprite_palette_start = background_palette_end;$/;"	m	class:Emulator::VRAM
sprite_width	src/ppu.h	/^        static unsigned constexpr sprite_width = 8;$/;"	m	class:Emulator::PPU
stack_bottom_address	src/cpu.h	/^        static unsigned constexpr stack_bottom_address = 0x100u;$/;"	m	class:Emulator::CPU
stack_pull_byte	src/cpu.cpp	/^        Byte stack_pull_byte()$/;"	f	struct:Emulator::CPU::Impl
stack_push_byte	src/cpu.cpp	/^        void stack_push_byte(Byte byte)$/;"	f	struct:Emulator::CPU::Impl
stack_push_pointer	src/cpu.cpp	/^        void stack_push_pointer(unsigned pointer)$/;"	f	struct:Emulator::CPU::Impl
stack_top_byte	src/cpu.cpp	/^        Byte stack_top_byte()$/;"	f	struct:Emulator::CPU::Impl
stack_top_pointer	src/cpu.cpp	/^        unsigned stack_top_pointer()$/;"	f	struct:Emulator::CPU::Impl
start	src/cpu.h	/^                static unsigned constexpr start = 0x0000u;$/;"	m	class:Emulator::CPU::RAM
status_	src/ppu.h	/^        ByteBitset status_ = 0;$/;"	m	class:Emulator::PPU
status_register	src/ppu.h	/^        static unsigned constexpr status_register = 0x2002;$/;"	m	class:Emulator::PPU
throw_not_readable	src/ppu.cpp	/^void PPU::throw_not_readable(std::string const& register_name,$/;"	f	class:Emulator::PPU
throw_not_valid	src/ppu.cpp	/^void PPU::throw_not_valid(unsigned address)$/;"	f	class:Emulator::PPU
throw_not_writable	src/ppu.cpp	/^void PPU::throw_not_writable(std::string const& register_name,$/;"	f	class:Emulator::PPU
tile_index	src/ppu.h	/^        Byte tile_index = 0;$/;"	m	struct:Emulator::Sprite
translate_opcode	src/cpu.cpp	/^        Instruction translate_opcode(Byte opcode)$/;"	f	struct:Emulator::CPU::Impl
unused_flag	src/cpu.h	/^        static unsigned constexpr unused_flag = 5;$/;"	m	class:Emulator::CPU
up	src/sdl++.h	/^        up = SDL_SCANCODE_UP,$/;"	m	class:Sdl::Scancode
value_	src/ppu.h	/^        unsigned value_ = 0;$/;"	m	class:Emulator::DoubleWriteRegister
vblank_finished	src/ppu.cpp	/^void PPU::vblank_finished()$/;"	f	class:Emulator::PPU
vblank_started	src/ppu.cpp	/^void PPU::vblank_started()$/;"	f	class:Emulator::PPU
vertical	src/cartridge.h	/^        vertical,$/;"	m	class:Emulator::Mirroring
vertical	src/sdl++.h	/^        vertical = SDL_FLIP_VERTICAL,$/;"	m	class:Sdl::Scancode::Flip
vram_	src/ppu.h	/^        VRAM vram_;$/;"	m	class:Emulator::PPU
vram_address_	src/ppu.h	/^        DoubleWriteRegister vram_address_;$/;"	m	class:Emulator::PPU
vram_address_register	src/ppu.h	/^        static unsigned constexpr vram_address_register = 0x2006;$/;"	m	class:Emulator::PPU
vram_data_buffer_	src/ppu.h	/^        Byte vram_data_buffer_ = 0;$/;"	m	class:Emulator::PPU
vram_data_register	src/ppu.h	/^        static unsigned constexpr vram_data_register = 0x2007;$/;"	m	class:Emulator::PPU
window	src/sdl++.h	/^        UniqueWindow window;$/;"	m	struct:Sdl::Scancode::Context
write_byte	src/cartridge.cpp	/^void NROM::write_byte(unsigned address, Byte byte)$/;"	f	class:Emulator::NROM
write_byte	src/cpu.cpp	/^void CPU::AccessibleMemory::write_byte(unsigned address, Byte byte)$/;"	f	class:Emulator::CPU::AccessibleMemory
write_byte	src/cpu.cpp	/^void CPU::RAM::write_byte(unsigned address, Byte byte)$/;"	f	class:Emulator::CPU::RAM
write_byte	src/joypads.cpp	/^void Joypads::write_byte(unsigned address, Byte byte)$/;"	f	class:Emulator::Joypads
write_byte	src/ppu.cpp	/^void PPU::write_byte(unsigned address, Byte byte)$/;"	f	class:Emulator::PPU
write_byte	src/ppu.cpp	/^void VRAM::write_byte(unsigned address, Byte byte)$/;"	f	class:Emulator::VRAM
write_pointer	src/utils.cpp	/^void Memory::write_pointer(unsigned address, unsigned pointer)$/;"	f	class:Emulator::Memory
x	src/cpu.cpp	/^        Byte x = 0;$/;"	m	struct:Emulator::CPU::Impl	file:
x	src/ppu.h	/^        Byte x = 0;$/;"	m	struct:Emulator::Sprite
x	src/sdl++.h	/^        x = SDL_SCANCODE_X,$/;"	m	class:Sdl::Scancode
y	src/cpu.cpp	/^        Byte y = 0;$/;"	m	struct:Emulator::CPU::Impl	file:
y	src/ppu.h	/^        Byte y = 0;$/;"	m	struct:Emulator::Sprite
y	src/sdl++.h	/^        y = SDL_SCANCODE_Y,$/;"	m	class:Sdl::Scancode
z	src/sdl++.h	/^        z = SDL_SCANCODE_Z$/;"	m	class:Sdl::Scancode
zero_flag	src/cpu.h	/^        static unsigned constexpr zero_flag = 1;$/;"	m	class:Emulator::CPU
zero_page	src/cpu.cpp	/^        Instruction zero_page(Operation operation)$/;"	f	struct:Emulator::CPU::Impl
zero_page	src/cpu.cpp	/^        Instruction zero_page(Operation operation, Offset offset)$/;"	f	struct:Emulator::CPU::Impl
zero_page_x	src/cpu.cpp	/^        Instruction zero_page_x(Operation operation)$/;"	f	struct:Emulator::CPU::Impl
zero_page_y	src/cpu.cpp	/^        Instruction zero_page_y(Operation operation)$/;"	f	struct:Emulator::CPU::Impl
~InitGuard	src/sdl++.cpp	/^InitGuard::~InitGuard()$/;"	f	class:Sdl::InitGuard
~RendererColorGuard	src/sdl++.cpp	/^RendererColorGuard::~RendererColorGuard()$/;"	f	class:Sdl::RendererColorGuard
